// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0
export struct DropDownColor {
    name: string,
    color: color,
}
export component ComboBoxBase {
    in property <[DropDownColor]> model;
    in property <bool> enabled <=> i-focus-scope.enabled;
    out property <bool> has-focus: (i-focus-scope.has-focus || popup-has-focus) && root.enabled;
    out property <bool> pressed <=> i-touch-area.pressed;
    out property <bool> has-hover: i-touch-area.has-hover;
    in-out property <int> current-index: 0;
    in-out property <DropDownColor> current-value: root.model[root.current-index];

    // Set from the ComboBox when the popup has the focus
    in-out property <bool> popup-has-focus;

    callback selected(current-value: DropDownColor);
    callback show-popup();
    callback close-popup();

    public function select(index: int) {
        if !root.enabled {
            return;
        }
        root.current-index = index;

        if root.current-value != root.model[root.current-index] {
            root.update-current-value();
        }
        root.selected(root.current-value);
    }

    public function move-selection-up() {
        root.select(Math.max(root.current-index - 1, 0));
    }

    public function move-selection-down() {
        root.select(Math.min(root.current-index + 1, root.model.length - 1));
    }

    public function popup-key-handler(event: KeyEvent) -> EventResult {
        if (event.text == Key.UpArrow) {
            root.move-selection-up();
            return accept;
        } else if (event.text == Key.DownArrow) {
            root.move-selection-down();
            return accept;
        } else if (event.text == Key.Return || event.text == Key.Escape) {
            root.close-popup();
            return accept;
        }
        return reject;
    }

    function reset-current() {
        root.current-index = 0;
    }

    function update-current-value() {
        if root.current-index < 0 || root.current-index >= root.model.length {
            root.current-value = model[0];
            return;
        }
        root.current-value = root.model[root.current-index];
    }

    changed model => {
        root.reset-current();
    }

    changed current-index => {
        root.update-current-value();
    }

    /// Minimum scroll delta so that the scroll wheel changes the value.
    in property <length> scroll-delta: 2px;

    forward-focus: i-focus-scope;

    i-focus-scope := FocusScope {
        changed has-focus => {
            if self.has-focus {
                // this means the popup was closed and we get back the focus
                root.popup-has-focus = false;
            }
        }
        key-pressed(event) => {
            if (!self.enabled) {
                return reject;
            }
            if (event.text == Key.UpArrow) {
                root.move-selection-up();
                return accept;
            } else if (event.text == Key.DownArrow) {
                root.move-selection-down();
                return accept;
            } else if (event.text == Key.Return) {
                root.show-popup();
            }
            return reject;
        }

        i-touch-area := TouchArea {
            enabled: root.enabled;

            clicked => {
                root.focus();
                root.show-popup();
            }

            scroll-event(event) => {
                if (!root.has-focus) {
                    return reject;
                }
                if (event.delta-y < -root.scroll-delta) {
                    root.move-selection-down();
                    return accept;
                }
                if (event.delta-y > root.scroll-delta) {
                    root.move-selection-up();
                    return accept;
                }
                reject
            }
        }
    }
}

// ... existing ComboBoxBase code remains unchanged ...

export component DropDownList {
    in property <[DropDownColor]> model <=> base.model;
    in property <bool> enabled <=> base.enabled;
    out property <bool> has-focus <=> base.has-focus;
    in-out property <int> current-index <=> base.current-index;
    in-out property <DropDownColor> current-value <=> base.current-value;
    in property <bool> showColor: true;

    callback selected <=> base.selected;

    min-width: 160px;
    min-height: 32px;
    horizontal-stretch: 1;
    vertical-stretch: 0;
    forward-focus: base;

    base := ComboBoxBase {
        width: 100%;
        height: 100%;

        show-popup => {
            popup.show();
        }
        close-popup => {
            popup.close();
        }
    }

    background := Rectangle {
        border-radius: 8px;
        background: enabled ? white : #f5f5f5;
        border-width: 1px;
        border-color: base.has-focus ? #007AFF : #d0d0d0;

        HorizontalLayout {
            padding-left: 12px;
            padding-right: 12px;
            spacing: 8px;
            alignment: center;

            if (showColor): VerticalLayout {
                min-height: 32px;
                alignment: center;
                Rectangle {
                    width: 12px;
                    height: 12px;
                    border-radius: 100px;
                    background: root.current-value.color;
                }
            }

            Text {
                horizontal-alignment: left;
                vertical-alignment: center;
                text: root.current-value.name;
                color: enabled ? black : #666;
            }

            Rectangle {
                width: 16px;
                min-height: 32px;
                VerticalLayout {
                    min-height: 32px;
                }

                Path {
                    fill: enabled ? #666 : #999;
                    commands: "M 0 0 L 8 8 L 16 0 Z";
                    y: (parent.height - self.height) / 2;
                    x: (parent.width - self.width) / 2;
                }
            }
        }
    }

    popup := PopupWindow {
        x: 0;
        y: root.height + 4px;
        width: root.width;
        height: root.height + 20px;
        visible: false;

        Rectangle {
            border-radius: 8px;
            background: white;
            border-width: 1px;
            border-color: #d0d0d0;
            drop-shadow-blur: 8px;
            drop-shadow-color: #0004;

            VerticalLayout {
                padding: 4px;
                spacing: 8px;

                for value[index] in root.model: TouchArea {
                    Rectangle {
                        height: 32px;
                        background: current-index == index ? #f0f0f0 : transparent;

                        HorizontalLayout {
                            padding-left: 12px;
                            padding-right: 12px;
                            alignment: start;

                            if (showColor): VerticalLayout {
                                min-height: 32px;
                                alignment: center;

                                Rectangle {
                                    width: 12px;
                                    height: 12px;
                                    border-radius: 100px;
                                    background: value.color;
                                }
                            }

                            Text {
                                text: value.name;
                                color: black;
                                vertical-alignment: center;
                            }
                        }
                    }

                    clicked => {
                        base.select(index);
                        popup.close();
                    }
                }
            }
        }
    }
}
